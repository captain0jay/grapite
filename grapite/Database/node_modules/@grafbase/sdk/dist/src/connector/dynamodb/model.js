"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBModel = void 0;
var field_1 = require("../../field");
var model_1 = require("../../model");
var DynamoDBModel = /** @class */ (function (_super) {
    __extends(DynamoDBModel, _super);
    function DynamoDBModel(name) {
        var _this = _super.call(this, name) || this;
        _this.isSearch = false;
        return _this;
    }
    /**
     * Push a field to the model definition.
     *
     * @param name - The name of the model.
     * @param definition - Fields to be included in the model.
     */
    DynamoDBModel.prototype.field = function (name, definition) {
        this.fields.push(new field_1.Field(name, definition));
        return this;
    };
    /**
     * Make the model searchable.
     */
    DynamoDBModel.prototype.search = function () {
        this.isSearch = true;
        return this;
    };
    DynamoDBModel.prototype.toString = function () {
        var search = this.isSearch ? ' @search' : '';
        var auth = this.authRules ? " @auth(\n    rules: ".concat(this.authRules, ")") : '';
        var cache = this.cacheDirective ? " ".concat(this.cacheDirective) : '';
        var header = "type ".concat(this.name, " @model").concat(search).concat(auth).concat(cache, " {");
        var fields = this.fields.map(function (field) { return "  ".concat(field); }).join('\n');
        var footer = '}';
        return "".concat(header, "\n").concat(fields, "\n").concat(footer);
    };
    return DynamoDBModel;
}(model_1.Model));
exports.DynamoDBModel = DynamoDBModel;
